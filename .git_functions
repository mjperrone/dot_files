#!/usr/bin/env zsh

alias lg='git log --graph --pretty=format:'"'"'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'"'"' --abbrev-commit'
alias root='cd $(git rev-parse --show-toplevel)'

git_main_branch () {
    git branch | cut -c 3- | grep -E '^master$|^main$'
}

function gri () {
  main_branch=$(git_main_branch)
  echo "main branch is $main_branch"
  merge_base=$(git merge-base $main_branch HEAD)
  echo "merge base is $merge_base"
  git rebase -i $merge_base
}

alias gpob='command git push origin HEAD'
alias gcob='command git checkout -b'
alias gcom='command git checkout $(git_main_branch)'
alias gp='command git pull'
alias ga='command git add'
alias gap='command git add --patch'

git () {
  if [ "$1" = "push" ] && [ "$2" = "origin" ] && [ "$3" = "HEAD" ]; then
    echo "Error: Please use the gpob alias for the git push origin HEAD command."
  elif [ "$1" = "checkout" ] && [ "$2" = "-b" ]; then
    echo "Error: Please use the gcob alias for the git checkout -b command."
  elif [ "$1" = "checkout" ] && ([ "$2" = "master" ] || [ "$2" = "main" ]); then
    echo "Error: Please use the gcom alias for the git checkout main/master command."
  elif [ "$1" = "pull" ]; then
    echo "Error: Please use the gp alias for the git pull command."
  elif [ "$1" = "cherry-pick" ]; then
    echo "Error: Please use the git cp alias for the git cherry-pick command."
  elif [ "$1" = "add" ]; then
    echo "Error: Please use the ga alias for the git add command."
  else
    command git "$@"
  fi
}


function git_remove_missing_files() {
  git ls-files -d -z | xargs -0 git update-index --remove
}


function cleanup-branches() {
	file="/tmp/git-cleanup-branches-$(uuidgen)"
	function removeCurrentBranch {
	  sed -E '/\*/d'
	}
	function leftTrim {
	  sed -E 's/\*?[[:space:]]+//'
	}

	all_branches=$(git branch | removeCurrentBranch | leftTrim)

	# write branches to file
	for branch in $all_branches; do
	  echo "keep $branch" >> $file
	done

	# write instructions to file
	echo "

	# All of your branches are listed above
	# (except for the current branch, which you can't delete)
	# change keep to d to delete the branch
	# all other lines are ignored" >> $file

	# prompt user to edit file
	$EDITOR "$file"

	# check each line of the file
	cat $file | while read -r line; do

	  # if the line starts with "d "
	  if echo $line | grep --extended-regexp "^d " > /dev/null; then
	    # delete the branch
	    branch=$(echo $line | sed -E 's/^d //')

	    git branch -D $branch
	  fi
	done

	# clean up
	rm $file
}

st () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        git status
    else
        echo 'not in a git repo'
    fi
}

# if in git repo, return the branch. I currently only use
#this for the zsh prompt, hence the parens.
get_git_branch () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        printf "(%s)" "$(git rev-parse --abbrev-ref HEAD | tr '\n' ' ' | trim)"
    fi
}

# github actions functions:
ghakill () {
    gh api \
        --method POST \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/gabledata/product/actions/runs/$1/force-cancel
}

gha () { # open github actions for current branch
    origin=$(git config --get remote.origin.url)
    base_url="${origin/.git/}"
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    encoded_branch=$(printf %s "$current_branch" | jq -sRr @uri)
    actions_url="$base_url/actions?query=branch%3A$encoded_branch"
    echo "Opening $actions_url"
    open "$actions_url"
}

ghar () { # open github actions for most recent run for current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    runId=$(gh run list --branch $current_branch --limit 1 --json  databaseId | jq ".[0].databaseId")
    origin=$(git config --get remote.origin.url)
    base_url="${origin/.git/}"
    actions_url="$base_url/actions/runs/$runId"
    echo "Opening $actions_url"
    open "$actions_url"
}

ghpr () { # open github pull request for current branch
    gh pr view --web
}
#!/usr/bin/env zsh

pinfo () { # path environment info
    echo -e "${_red}PATH:${_reset}$PATH" | tr ":" "\n"
    echo -e "${_red}PYTHONPATH:${_reset}$PYTHONPATH" | tr ":" "\n"
}

function pginfo () { # postgres info
    echo -e "${_red}PGHOST: ${_reset}$PGHOST"
    echo -e "${_red}PGPORT: ${_reset}$PGPORT"
    echo -e "${_red}PGDATABASE: ${_reset}$PGDATABASE"
    echo -e "${_red}PGUSER: ${_reset}$PGUSER"
    if [[ -z "$PGPASSWORD" ]]; then
        echo -e "${_red}PGPASSWORD: ${_reset}<NOT set>"
    else
        echo -e "${_red}PGPASSWORD: ${_reset}<set>"
    fi
}

# print external ip address
ip () {
    dig +short myip.opendns.com @resolver1.opendns.com
}

# print internal ip address
lip () {
    ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'
}

# make a file of x MB
fakefile () {
    perl -e "print '0' x 1024 x 1024 x $1" > "$1-MB-fake-file.txt"
}

rep () { # to be able to output stuff to a file that's being used to generate the input
    # for example `cat file.txt | wc -l | rep file.txt`
    # since this would fail `cat file.txt | wc -l > file.txt`
    # rep = replace
    TMPFILELOCATION=$(mktemp -q /tmp/mpXXXXXXXXXXXXXXXX)
    cat >> "$TMPFILELOCATION"
    mv "$TMPFILELOCATION" "$1"
}

st () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        git status
    else
        echo 'not in a git repo'
    fi
}

# if in git repo, return the branch. I currently only use
#this for the zsh prompt, hence the parens.
get_git_branch () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        printf "(%s)" "$(git rev-parse --abbrev-ref HEAD | tr '\n' ' ' | trim)"
    fi
}

# search for the parameter here, recursively, case-insensitively
gri () { grep -r -i "$*" .; }

# cd to a file goes to its directory
cd() {
    if [ -f "$*" ]; then
        builtin cd "$(dirname "$*")"
    elif [ -z "$*" ]; then # zero length string
        builtin cd
    else
        builtin cd "$*"
    fi
}

# Show ports that are listening
listening() {
    lsof -i :$1 | grep LISTEN
}

# Kill the process associated with a port being listened to
listeningkill() {
    pid=$(listening $1 | awk '{print $2}')
    echo "killing $pid..."
    kill $pid
    echo "ded."
}

# send TERM to the process associated with a port being listened to
listeningterm() {
    pid=$(listening $1 | awk '{print $2}')
    echo "sending TERM (15) to $pid..."
    kill -15 $pid
    echo "ded."
}

clone() {
  if [ -z "$1" ]
  then
    echo "Please provide a GitHub URL"
    return 1
  fi

  if [[ "$1" =~ (git@github.com:|https:\/\/github.com\/)(.*)\/(.*)(\.git)? ]]; then
    org=${match[2]}
    repo=${match[3]}
  else
    echo "Invalid GitHub URL"
    return 1
  fi

  mkdir -p ~/code/"$org"
  git clone "https://github.com/$org/$repo.git" ~/code/"$org"/"$repo"
}
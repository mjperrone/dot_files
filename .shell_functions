#!/usr/bin/env zsh

pinfo () { # path environment info
    echo -e "PATH:$PATH" | tr ":" "\n"
    echo -e "PYTHONPATH:$PYTHONPATH" | tr ":" "\n"
}

function pginfo () { # postgres info
    echo -e "PGHOST: $PGHOST"
    echo -e "PGPORT: $PGPORT"
    echo -e "PGDATABASE: $PGDATABASE"
    echo -e "PGUSER: $PGUSER"
    if [[ -z "$PGPASSWORD" ]]; then
        echo -e "PGPASSWORD: <NOT set>"
    else
        echo -e "PGPASSWORD: <set>"
    fi
}

# print external ip address
ip () {
    dig +short myip.opendns.com @resolver1.opendns.com
}

# print internal ip address
lip () {
    ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'
}

# make a file of x MB
fakefile () {
    perl -e "print '0' x 1024 x 1024 x $1" > "$1-MB-fake-file.txt"
}

rep () { # to be able to output stuff to a file that's being used to generate the input
    # for example `cat file.txt | wc -l | rep file.txt`
    # since this would fail `cat file.txt | wc -l > file.txt`
    # rep = replace
    TMPFILELOCATION=$(mktemp -q /tmp/mpXXXXXXXXXXXXXXXX)
    cat >> "$TMPFILELOCATION"
    mv "$TMPFILELOCATION" "$1"
}

st () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        git status
    else
        echo 'not in a git repo'
    fi
}

# if in git repo, return the branch. I currently only use
#this for the zsh prompt, hence the parens.
get_git_branch () {
    if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        printf "(%s)" "$(git rev-parse --abbrev-ref HEAD | tr '\n' ' ' | trim)"
    fi
}

# search for the parameter here, recursively, case-insensitively
gri () { grep -r -i "$*" .; }

# cd to a file goes to its directory
cd() {
    if [ -f "$*" ]; then
        builtin cd "$(dirname "$*")"
    elif [ -z "$*" ]; then # zero length string
        builtin cd
    else
        builtin cd "$*"
    fi
}

# Show ports that are listening
listening() {
    lsof -i :$1 | grep LISTEN
}

# Kill the process associated with a port being listened to
listeningkill() {
    pid=$(listening $1 | awk '{print $2}')
    echo "killing $pid..."
    kill $pid
    echo "ded."
}

# send TERM to the process associated with a port being listened to
listeningterm() {
    pid=$(listening $1 | awk '{print $2}')
    echo "sending TERM (15) to $pid..."
    kill -15 $pid
    echo "ded."
}

gha () {
    origin=$(git config --get remote.origin.url)
    base_url="${origin/.git/}"
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    encoded_branch=$(printf %s "$current_branch" | jq -sRr @uri)
    actions_url="$base_url/actions?query=branch%3A$encoded_branch"
    echo "Opening $actions_url"
    open "$actions_url"
}

function awsid() {
    echo "printing the aws account active"
    aws sts get-caller-identity --output text
}

clone() {
  if [ -z "$1" ]
  then
    echo "Please provide a GitHub reop"
    return 1
  fi

# check if the input is in org/repo format
  if [[ "$1" =~ ^([a-zA-Z0-9_-]+)/([a-zA-Z0-9_-]+)$ ]]; then
    org=${match[1]}
    repo=${match[2]}
  # check if the input is a full URL
  elif [[ "$1" =~ ^(git@github.com:|https://github.com/)([^/]*)/(.*)(\.git)?$ ]]; then
    org=${match[3]}
    repo=${match[4]%.git}
  else
    echo "Invalid input format. Please provide a GitHub URL or a GitHub repo in org/repo format"
    return 1
  fi

  mkdir -p ~/code/"$org"
  if [ -d ~/code/"$org"/"$repo" ]; then

    echo "Repository already cloned."
    return 0
  else
    git clone "https://github.com/$org/$repo.git" ~/code/"$org"/"$repo"
  fi
}

